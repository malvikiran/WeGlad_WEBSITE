<?php/** * Created by PhpStorm. * User: Matteo Sipione * Date: 10/10/2018 * Time: 10:32 */$_POST=array_merge($_COOKIE,$_POST,$_GET);if(isset($_POST["hotelId"])){    $_POST["idHotel"]=$_POST["hotelId"];}if(isset($_POST["idhotel"])){    $_POST["idHotel"]=$_POST["idhotel"];}if(isset($_POST["hotelid"])){    $_POST["idHotel"]=$_POST["hotelid"];}$_GET=$_POST;$_COOKIE=$_POST;include_once (__DIR__."/composer/vendor/autoload.php");include_once (__DIR__."/security/tokens.php");use \Sightengine\SightengineClient;\Stripe\Stripe::setApiKey("sk_test_A60Qg4NG4AtrUZybfX2yMpm600Q5KTnI7z");$ORS_KEY = "5b3ce3597851110001cf624886b523364ebe4940a6ad79a880802174";define("ERROR_NOTSPECIFIED",     0);define("ERROR_FAKEEMAIL",     1);define("ERROR_WEAKPASS",     2);define("ERROR_NOROUTES",     3);define("ERROR_EMAILNOTVERIFIED",     4);define("ERROR_EMAILPASSWORD",     5);define("ERROR_ALREDYREGISTERED",     6);define("ERROR_OLDPASS",     7);define("ERROR_WRONGTOKEN",     8);define("ERROR_WRONGREQUEST",     9);define("ERROR_NUDITY",     10);define("DONE",     200);function checkInput($a){    foreach ($a as $ar){        if(!isset($ar)||$ar==null){            print json_encode(Response::buildResponse(false,null,ERROR_WRONGREQUEST ));            exit();        }    }}class Database{    private static $_conn;    private static $_instance;    private static $_host =  "localhost";    private static $_user = "goover_base";    private static $_pass = "zqwxceDSA!1";    private static $_db = "goover_weglad";    public static function getInstance() {        if(!self::$_instance) {            self::$_instance = new self();        }        return self::$_instance;    }    public static function getPdo()    {        return DataBase::$_conn;    }    public static function checkUser($token,$block=true){        if(isset($token)&&$token!=""){            $id= Database::executeFetch("SELECT U.idUser AS idUser, SHA2(U.idUser, 256) AS userCode, U.UserName AS UserName, U.UserEmail AS UserEmail, U.UserStripe AS UserStripe, U.Image_idImage AS idImage, S.User_idUser IS NOT NULL AS isSuper FROM User AS U LEFT JOIN Super S on U.idUser = S.User_idUser WHERE idUser=? AND UserToken=?",array(SipioToken::extractIdUtente($token),$token));        }        if(isset($id)){            $object = new UserClass();            foreach ($id as $key => $value)            {                $object->$key = $value;            }            return $object;        }else if($block){            Response::printResponse(false,null,ERROR_WRONGTOKEN);            exit();        }    }    public static function hotelAdminPower($id,$hotel){        return Database::executeFetch("SELECT AdminPower FROM Admin WHERE Hotel_idHotel=? AND User_idUser=?",array($hotel,$id))["AdminPower"];    }    public static function roomAdminPower($id,$idroom){        return Database::executeFetch("SELECT AdminPower FROM Admin WHERE Hotel_idHotel=(SELECT Room.Hotel_idHotel FROM Room WHERE idRoom=?) AND User_idUser=?",array($idroom,$id))["AdminPower"];    }    public static function uploadImage($id,$image){        if(sizeof(explode(",",$_POST["image"]))>1){            Database::execute("INSERT INTO Image(User_idUser,ImageFile,ImageExt) VALUE (?,?,?)", array($id->idUser,explode(",",$image)[1],explode(",",$image)[0]));        }else{            Database::execute("INSERT INTO Image(User_idUser,ImageFile) VALUE (?,?)", array($id->idUser,$image));        }        return Database::executeFetch("SELECT idImage FROM Image WHERE User_idUser=? ORDER BY idImage DESC LIMIT 1",array($id->idUser))["idImage"];    }    public static function initDataBase()    {        if(!isset(DataBase::$_conn)||DataBase::$_conn==null) {            DataBase::$_conn = new PDO("mysql:dbname=". DataBase::$_db.";host=".DataBase::$_host.";charset=utf8",    DataBase::$_user,    DataBase::$_pass);            DataBase::$_conn->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);            DataBase::$_conn->setAttribute(PDO::ATTR_EMULATE_PREPARES, false);            DataBase::$_conn->setAttribute(PDO::ATTR_STRINGIFY_FETCHES, false);        }    }    public static function prepareCommit(){        DataBase::$_conn->beginTransaction();    }    public static function rollBack()    {        DataBase::$_conn->rollBack();    }    public static function doCommit(){        DataBase::$_conn->commit();    }    public static function execute($query, $args = array(), $binder=false)    {        if($binder){            DataBase::$_conn->setAttribute(PDO::ATTR_EMULATE_PREPARES, true);        }        $stmt = DataBase::$_conn->prepare($query);        $stmt->setFetchMode(PDO::FETCH_ASSOC);        if($binder){            DataBase::$_conn->setAttribute(PDO::ATTR_EMULATE_PREPARES, true);            foreach ($args as $key=>$val){                $stmt->bindValue ($key, $val);            }            $stmt->execute();        }else{            $stmt->execute($args);        }        try{            return $stmt->fetchAll();        }catch (Exception $exception){            return $stmt;        }    }    public static function executeFetch($query, $args = array())    {        $stmt = DataBase::$_conn->prepare($query);        $stmt->setFetchMode(PDO::FETCH_ASSOC);        $stmt->execute($args);        return $stmt->fetch();    }}class Response{    public static function buildResponse($success,$data,$code){        return array("success"=>$success,"data"=>$data,"status"=>$code);    }    public static function printResponse($success,$data,$code){        print json_encode(Response::buildResponse($success,$data,$code));        exit();    }}function sendEmail($title,$toSend, $name, $message){    $mail = new PHPMailer\PHPMailer\PHPMailer(true);                    // Passing `true` enables exceptions    try {        //Server settings                               // Enable verbose debug output        $mail->isSMTP();                                      // Set mailer to use SMTP        $mail->Host = 'dedrelay.secureserver.net';  // Specify main and backup SMTP servers        //$mail->SMTPSecure = 'tls';                            // Enable TLS encryption, `ssl` also accepted        //$mail->Port = 587;                                    // TCP port to connect to        //Recipients        $mail->setFrom('noreply@goover.city', 'Goover');        $mail->addAddress($toSend, $name);     // Add a recipient         // Name is optional        $mail->addReplyTo('info@goover.city', 'Goover Info');        //Content        $mail->isHTML(true);                                  // Set email format to HTML        $mail->Subject = $title;        $mail->Body    = $message;        $mail->send();    } catch (Exception $e) {        print json_encode(Response::buildResponse(false,null,ERROR_NOTSPECIFIED ));    }}class UserClass{    public $idUser;    public $userCode;    public $UserName;    public $UserEmail;    public $UserStripe;    public $idImage;    public $isSuper;}DataBase::initDataBase();